/*
 * DocRaptor
 *
 * A native client library for the DocRaptor HTML to PDF/XLS service.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace DocRaptor.Model
{
    /// <summary>
    /// DocStatus
    /// </summary>
    [DataContract]
    public partial class DocStatus :  IEquatable<DocStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocStatus" /> class.
        /// </summary>
        /// <param name="status">The present status of the document. Can be queued, working, completed, and failed..</param>
        /// <param name="downloadUrl">The URL where the document can be retrieved. This URL may only be used a few times..</param>
        /// <param name="downloadId">The identifier for downloading the document with the download API..</param>
        /// <param name="message">Additional information..</param>
        /// <param name="numberOfPages">Number of PDF pages in document..</param>
        /// <param name="validationErrors">Error information..</param>
        public DocStatus(string status = default(string), string downloadUrl = default(string), string downloadId = default(string), string message = default(string), int? numberOfPages = default(int?), string validationErrors = default(string))
        {
            this.Status = status;
            this.DownloadUrl = downloadUrl;
            this.DownloadId = downloadId;
            this.Message = message;
            this.NumberOfPages = numberOfPages;
            this.ValidationErrors = validationErrors;
        }

        /// <summary>
        /// The present status of the document. Can be queued, working, completed, and failed.
        /// </summary>
        /// <value>The present status of the document. Can be queued, working, completed, and failed.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The URL where the document can be retrieved. This URL may only be used a few times.
        /// </summary>
        /// <value>The URL where the document can be retrieved. This URL may only be used a few times.</value>
        [DataMember(Name="download_url", EmitDefaultValue=false)]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// The identifier for downloading the document with the download API.
        /// </summary>
        /// <value>The identifier for downloading the document with the download API.</value>
        [DataMember(Name="download_id", EmitDefaultValue=false)]
        public string DownloadId { get; set; }

        /// <summary>
        /// Additional information.
        /// </summary>
        /// <value>Additional information.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Number of PDF pages in document.
        /// </summary>
        /// <value>Number of PDF pages in document.</value>
        [DataMember(Name="number_of_pages", EmitDefaultValue=false)]
        public int? NumberOfPages { get; set; }

        /// <summary>
        /// Error information.
        /// </summary>
        /// <value>Error information.</value>
        [DataMember(Name="validation_errors", EmitDefaultValue=false)]
        public string ValidationErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocStatus {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("  DownloadId: ").Append(DownloadId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  NumberOfPages: ").Append(NumberOfPages).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocStatus);
        }

        /// <summary>
        /// Returns true if DocStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of DocStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocStatus input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) &&
                (
                    this.DownloadUrl == input.DownloadUrl ||
                    (this.DownloadUrl != null &&
                    this.DownloadUrl.Equals(input.DownloadUrl))
                ) &&
                (
                    this.DownloadId == input.DownloadId ||
                    (this.DownloadId != null &&
                    this.DownloadId.Equals(input.DownloadId))
                ) &&
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) &&
                (
                    this.NumberOfPages == input.NumberOfPages ||
                    (this.NumberOfPages != null &&
                    this.NumberOfPages.Equals(input.NumberOfPages))
                ) &&
                (
                    this.ValidationErrors == input.ValidationErrors ||
                    (this.ValidationErrors != null &&
                    this.ValidationErrors.Equals(input.ValidationErrors))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.DownloadUrl != null)
                    hashCode = hashCode * 59 + this.DownloadUrl.GetHashCode();
                if (this.DownloadId != null)
                    hashCode = hashCode * 59 + this.DownloadId.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.NumberOfPages != null)
                    hashCode = hashCode * 59 + this.NumberOfPages.GetHashCode();
                if (this.ValidationErrors != null)
                    hashCode = hashCode * 59 + this.ValidationErrors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
