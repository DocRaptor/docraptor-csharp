/*
 * DocRaptor
 *
 * A native client library for the DocRaptor HTML to PDF/XLS service.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace DocRaptor.Model
{
    /// <summary>
    /// AsyncDoc
    /// </summary>
    [DataContract]
    public partial class AsyncDoc :  IEquatable<AsyncDoc>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsyncDoc" /> class.
        /// </summary>
        /// <param name="statusId">The identifier used to get the status of the document using the status API..</param>
        public AsyncDoc(string statusId = default(string))
        {
            this.StatusId = statusId;
        }

        /// <summary>
        /// The identifier used to get the status of the document using the status API.
        /// </summary>
        /// <value>The identifier used to get the status of the document using the status API.</value>
        [DataMember(Name="status_id", EmitDefaultValue=false)]
        public string StatusId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsyncDoc {\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AsyncDoc);
        }

        /// <summary>
        /// Returns true if AsyncDoc instances are equal
        /// </summary>
        /// <param name="input">Instance of AsyncDoc to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsyncDoc input)
        {
            if (input == null)
                return false;

            return
                (
                    this.StatusId == input.StatusId ||
                    (this.StatusId != null &&
                    this.StatusId.Equals(input.StatusId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatusId != null)
                    hashCode = hashCode * 59 + this.StatusId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
