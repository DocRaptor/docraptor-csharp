/*
 * DocRaptor
 *
 * A native client library for the DocRaptor HTML to PDF/XLS service.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using DocRaptor.Client;
using DocRaptor.Model;

namespace DocRaptor.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Creates a document asynchronously. You must use a callback url or the returned status id and the status API to find out when it completes. Then use the download API to get the document.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>AsyncDoc</returns>
        AsyncDoc CreateAsyncDoc (Doc doc);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Creates a document asynchronously. You must use a callback url or the returned status id and the status API to find out when it completes. Then use the download API to get the document.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>ApiResponse of AsyncDoc</returns>
        ApiResponse<AsyncDoc> CreateAsyncDocWithHttpInfo (Doc doc);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Creates a document synchronously.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>byte[]</returns>
        byte[] CreateDoc (Doc doc);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Creates a document synchronously.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> CreateDocWithHttpInfo (Doc doc);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Creates a hosted document asynchronously. You must use a callback url or the returned status id and the status API to find out when it completes. Then use the download API to get the document.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>AsyncDoc</returns>
        AsyncDoc CreateHostedAsyncDoc (Doc doc);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Creates a hosted document asynchronously. You must use a callback url or the returned status id and the status API to find out when it completes. Then use the download API to get the document.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>ApiResponse of AsyncDoc</returns>
        ApiResponse<AsyncDoc> CreateHostedAsyncDocWithHttpInfo (Doc doc);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Creates a hosted document synchronously.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>DocStatus</returns>
        DocStatus CreateHostedDoc (Doc doc);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Creates a hosted document synchronously.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>ApiResponse of DocStatus</returns>
        ApiResponse<DocStatus> CreateHostedDocWithHttpInfo (Doc doc);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Expires a previously created hosted doc.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The download_id returned from status request or hosted document response.</param>
        /// <returns></returns>
        void Expire (string id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Expires a previously created hosted doc.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The download_id returned from status request or hosted document response.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExpireWithHttpInfo (string id);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Downloads a finished document.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The download_id returned from an async status request or callback.</param>
        /// <returns>byte[]</returns>
        byte[] GetAsyncDoc (string id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Downloads a finished document.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The download_id returned from an async status request or callback.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetAsyncDocWithHttpInfo (string id);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Check on the status of an asynchronously created document.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The status_id returned when creating an asynchronous document.</param>
        /// <returns>DocStatus</returns>
        DocStatus GetAsyncDocStatus (string id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Check on the status of an asynchronously created document.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The status_id returned when creating an asynchronous document.</param>
        /// <returns>ApiResponse of DocStatus</returns>
        ApiResponse<DocStatus> GetAsyncDocStatusWithHttpInfo (string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Creates a document asynchronously. You must use a callback url or the returned status id and the status API to find out when it completes. Then use the download API to get the document.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>Task of AsyncDoc</returns>
        System.Threading.Tasks.Task<AsyncDoc> CreateAsyncDocAsync (Doc doc);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Creates a document asynchronously. You must use a callback url or the returned status id and the status API to find out when it completes. Then use the download API to get the document.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>Task of ApiResponse (AsyncDoc)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsyncDoc>> CreateAsyncDocAsyncWithHttpInfo (Doc doc);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Creates a document synchronously.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> CreateDocAsync (Doc doc);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Creates a document synchronously.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> CreateDocAsyncWithHttpInfo (Doc doc);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Creates a hosted document asynchronously. You must use a callback url or the returned status id and the status API to find out when it completes. Then use the download API to get the document.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>Task of AsyncDoc</returns>
        System.Threading.Tasks.Task<AsyncDoc> CreateHostedAsyncDocAsync (Doc doc);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Creates a hosted document asynchronously. You must use a callback url or the returned status id and the status API to find out when it completes. Then use the download API to get the document.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>Task of ApiResponse (AsyncDoc)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsyncDoc>> CreateHostedAsyncDocAsyncWithHttpInfo (Doc doc);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Creates a hosted document synchronously.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>Task of DocStatus</returns>
        System.Threading.Tasks.Task<DocStatus> CreateHostedDocAsync (Doc doc);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Creates a hosted document synchronously.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>Task of ApiResponse (DocStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocStatus>> CreateHostedDocAsyncWithHttpInfo (Doc doc);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Expires a previously created hosted doc.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The download_id returned from status request or hosted document response.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExpireAsync (string id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Expires a previously created hosted doc.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The download_id returned from status request or hosted document response.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExpireAsyncWithHttpInfo (string id);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Downloads a finished document.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The download_id returned from an async status request or callback.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GetAsyncDocAsync (string id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Downloads a finished document.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The download_id returned from an async status request or callback.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GetAsyncDocAsyncWithHttpInfo (string id);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Check on the status of an asynchronously created document.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The status_id returned when creating an asynchronous document.</param>
        /// <returns>Task of DocStatus</returns>
        System.Threading.Tasks.Task<DocStatus> GetAsyncDocStatusAsync (string id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Check on the status of an asynchronously created document.
        /// </remarks>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The status_id returned when creating an asynchronous document.</param>
        /// <returns>Task of ApiResponse (DocStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocStatus>> GetAsyncDocStatusAsyncWithHttpInfo (string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocApi : IDocApi
    {
        private DocRaptor.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocApi(String basePath)
        {
            this.Configuration = new DocRaptor.Client.Configuration { BasePath = basePath };

            ExceptionFactory = DocRaptor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocApi(DocRaptor.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = DocRaptor.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = DocRaptor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DocRaptor.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocRaptor.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Creates a document asynchronously. You must use a callback url or the returned status id and the status API to find out when it completes. Then use the download API to get the document.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>AsyncDoc</returns>
        public AsyncDoc CreateAsyncDoc (Doc doc)
        {
             ApiResponse<AsyncDoc> localVarResponse = CreateAsyncDocWithHttpInfo(doc);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a document asynchronously. You must use a callback url or the returned status id and the status API to find out when it completes. Then use the download API to get the document.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>ApiResponse of AsyncDoc</returns>
        public ApiResponse< AsyncDoc > CreateAsyncDocWithHttpInfo (Doc doc)
        {
            // verify the required parameter 'doc' is set
            if (doc == null)
                throw new ApiException(400, "Missing required parameter 'doc' when calling DocApi->CreateAsyncDoc");

            var localVarPath = "/async_docs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "application/pdf",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (doc != null && doc.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(doc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = doc; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAsyncDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsyncDoc>(localVarStatusCode,
                localVarResponse.Headers,
                (AsyncDoc) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncDoc)));
        }

        /// <summary>
        ///  Creates a document asynchronously. You must use a callback url or the returned status id and the status API to find out when it completes. Then use the download API to get the document.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>Task of AsyncDoc</returns>
        public async System.Threading.Tasks.Task<AsyncDoc> CreateAsyncDocAsync (Doc doc)
        {
             ApiResponse<AsyncDoc> localVarResponse = await CreateAsyncDocAsyncWithHttpInfo(doc);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a document asynchronously. You must use a callback url or the returned status id and the status API to find out when it completes. Then use the download API to get the document.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>Task of ApiResponse (AsyncDoc)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsyncDoc>> CreateAsyncDocAsyncWithHttpInfo (Doc doc)
        {
            // verify the required parameter 'doc' is set
            if (doc == null)
                throw new ApiException(400, "Missing required parameter 'doc' when calling DocApi->CreateAsyncDoc");

            var localVarPath = "/async_docs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "application/pdf",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (doc != null && doc.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(doc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = doc; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAsyncDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsyncDoc>(localVarStatusCode,
                localVarResponse.Headers,
                (AsyncDoc) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncDoc)));
        }

        /// <summary>
        ///  Creates a document synchronously.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>byte[]</returns>
        public byte[] CreateDoc (Doc doc)
        {
             ApiResponse<byte[]> localVarResponse = CreateDocWithHttpInfo(doc);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a document synchronously.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > CreateDocWithHttpInfo (Doc doc)
        {
            // verify the required parameter 'doc' is set
            if (doc == null)
                throw new ApiException(400, "Missing required parameter 'doc' when calling DocApi->CreateDoc");

            var localVarPath = "/docs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "application/pdf",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (doc != null && doc.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(doc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = doc; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDoc", localVarResponse);
                if (exception != null) throw exception;
            }
            
            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers,
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  Creates a document synchronously.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> CreateDocAsync (Doc doc)
        {
             ApiResponse<byte[]> localVarResponse = await CreateDocAsyncWithHttpInfo(doc);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a document synchronously.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> CreateDocAsyncWithHttpInfo (Doc doc)
        {
            // verify the required parameter 'doc' is set
            if (doc == null)
                throw new ApiException(400, "Missing required parameter 'doc' when calling DocApi->CreateDoc");

            var localVarPath = "/docs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "application/pdf",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (doc != null && doc.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(doc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = doc; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers,
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  Creates a hosted document asynchronously. You must use a callback url or the returned status id and the status API to find out when it completes. Then use the download API to get the document.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>AsyncDoc</returns>
        public AsyncDoc CreateHostedAsyncDoc (Doc doc)
        {
             ApiResponse<AsyncDoc> localVarResponse = CreateHostedAsyncDocWithHttpInfo(doc);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a hosted document asynchronously. You must use a callback url or the returned status id and the status API to find out when it completes. Then use the download API to get the document.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>ApiResponse of AsyncDoc</returns>
        public ApiResponse< AsyncDoc > CreateHostedAsyncDocWithHttpInfo (Doc doc)
        {
            // verify the required parameter 'doc' is set
            if (doc == null)
                throw new ApiException(400, "Missing required parameter 'doc' when calling DocApi->CreateHostedAsyncDoc");

            var localVarPath = "/hosted_async_docs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "application/pdf",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (doc != null && doc.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(doc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = doc; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateHostedAsyncDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsyncDoc>(localVarStatusCode,
                localVarResponse.Headers,
                (AsyncDoc) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncDoc)));
        }

        /// <summary>
        ///  Creates a hosted document asynchronously. You must use a callback url or the returned status id and the status API to find out when it completes. Then use the download API to get the document.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>Task of AsyncDoc</returns>
        public async System.Threading.Tasks.Task<AsyncDoc> CreateHostedAsyncDocAsync (Doc doc)
        {
             ApiResponse<AsyncDoc> localVarResponse = await CreateHostedAsyncDocAsyncWithHttpInfo(doc);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a hosted document asynchronously. You must use a callback url or the returned status id and the status API to find out when it completes. Then use the download API to get the document.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>Task of ApiResponse (AsyncDoc)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsyncDoc>> CreateHostedAsyncDocAsyncWithHttpInfo (Doc doc)
        {
            // verify the required parameter 'doc' is set
            if (doc == null)
                throw new ApiException(400, "Missing required parameter 'doc' when calling DocApi->CreateHostedAsyncDoc");

            var localVarPath = "/hosted_async_docs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "application/pdf",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (doc != null && doc.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(doc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = doc; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateHostedAsyncDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsyncDoc>(localVarStatusCode,
                localVarResponse.Headers,
                (AsyncDoc) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncDoc)));
        }

        /// <summary>
        ///  Creates a hosted document synchronously.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>DocStatus</returns>
        public DocStatus CreateHostedDoc (Doc doc)
        {
             ApiResponse<DocStatus> localVarResponse = CreateHostedDocWithHttpInfo(doc);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a hosted document synchronously.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>ApiResponse of DocStatus</returns>
        public ApiResponse< DocStatus > CreateHostedDocWithHttpInfo (Doc doc)
        {
            // verify the required parameter 'doc' is set
            if (doc == null)
                throw new ApiException(400, "Missing required parameter 'doc' when calling DocApi->CreateHostedDoc");

            var localVarPath = "/hosted_docs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "application/pdf",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (doc != null && doc.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(doc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = doc; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateHostedDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocStatus>(localVarStatusCode,
                localVarResponse.Headers,
                (DocStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocStatus)));
        }

        /// <summary>
        ///  Creates a hosted document synchronously.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>Task of DocStatus</returns>
        public async System.Threading.Tasks.Task<DocStatus> CreateHostedDocAsync (Doc doc)
        {
             ApiResponse<DocStatus> localVarResponse = await CreateHostedDocAsyncWithHttpInfo(doc);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a hosted document synchronously.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doc">The document to be created.</param>
        /// <returns>Task of ApiResponse (DocStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocStatus>> CreateHostedDocAsyncWithHttpInfo (Doc doc)
        {
            // verify the required parameter 'doc' is set
            if (doc == null)
                throw new ApiException(400, "Missing required parameter 'doc' when calling DocApi->CreateHostedDoc");

            var localVarPath = "/hosted_docs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "application/pdf",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (doc != null && doc.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(doc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = doc; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateHostedDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocStatus>(localVarStatusCode,
                localVarResponse.Headers,
                (DocStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocStatus)));
        }

        /// <summary>
        ///  Expires a previously created hosted doc.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The download_id returned from status request or hosted document response.</param>
        /// <returns></returns>
        public void Expire (string id)
        {
             ExpireWithHttpInfo(id);
        }

        /// <summary>
        ///  Expires a previously created hosted doc.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The download_id returned from status request or hosted document response.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExpireWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocApi->Expire");

            var localVarPath = "/expire/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "application/pdf",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Expire", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers,
                null);
        }

        /// <summary>
        ///  Expires a previously created hosted doc.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The download_id returned from status request or hosted document response.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExpireAsync (string id)
        {
             await ExpireAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  Expires a previously created hosted doc.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The download_id returned from status request or hosted document response.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExpireAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocApi->Expire");

            var localVarPath = "/expire/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "application/pdf",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Expire", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers,
                null);
        }

        /// <summary>
        ///  Downloads a finished document.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The download_id returned from an async status request or callback.</param>
        /// <returns>byte[]</returns>
        public byte[] GetAsyncDoc (string id)
        {
             ApiResponse<byte[]> localVarResponse = GetAsyncDocWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Downloads a finished document.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The download_id returned from an async status request or callback.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > GetAsyncDocWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocApi->GetAsyncDoc");

            var localVarPath = "/download/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "application/pdf",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAsyncDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers,
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  Downloads a finished document.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The download_id returned from an async status request or callback.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GetAsyncDocAsync (string id)
        {
             ApiResponse<byte[]> localVarResponse = await GetAsyncDocAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Downloads a finished document.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The download_id returned from an async status request or callback.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GetAsyncDocAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocApi->GetAsyncDoc");

            var localVarPath = "/download/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "application/pdf",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAsyncDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers,
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  Check on the status of an asynchronously created document.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The status_id returned when creating an asynchronous document.</param>
        /// <returns>DocStatus</returns>
        public DocStatus GetAsyncDocStatus (string id)
        {
             ApiResponse<DocStatus> localVarResponse = GetAsyncDocStatusWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Check on the status of an asynchronously created document.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The status_id returned when creating an asynchronous document.</param>
        /// <returns>ApiResponse of DocStatus</returns>
        public ApiResponse< DocStatus > GetAsyncDocStatusWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocApi->GetAsyncDocStatus");

            var localVarPath = "/status/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "application/pdf",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAsyncDocStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocStatus>(localVarStatusCode,
                localVarResponse.Headers,
                (DocStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocStatus)));
        }

        /// <summary>
        ///  Check on the status of an asynchronously created document.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The status_id returned when creating an asynchronous document.</param>
        /// <returns>Task of DocStatus</returns>
        public async System.Threading.Tasks.Task<DocStatus> GetAsyncDocStatusAsync (string id)
        {
             ApiResponse<DocStatus> localVarResponse = await GetAsyncDocStatusAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Check on the status of an asynchronously created document.
        /// </summary>
        /// <exception cref="DocRaptor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The status_id returned when creating an asynchronous document.</param>
        /// <returns>Task of ApiResponse (DocStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocStatus>> GetAsyncDocStatusAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocApi->GetAsyncDocStatus");

            var localVarPath = "/status/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "application/pdf",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAsyncDocStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocStatus>(localVarStatusCode,
                localVarResponse.Headers,
                (DocStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocStatus)));
        }

    }
}
