/*
 * DocRaptor
 *
 * A native client library for the DocRaptor HTML to PDF/XLS service.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using DocRaptor.Client;
using DocRaptor.Api;
using DocRaptor.Model;

namespace DocRaptor.Test
{
    /// <summary>
    ///  Class for testing DocApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DocApiTests
    {
        private DocApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DocApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DocApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' DocApi
            //Assert.IsInstanceOf(typeof(DocApi), instance);
        }


        /// <summary>
        /// Test CreateAsyncDoc
        /// </summary>
        [Test]
        public void CreateAsyncDocTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Doc doc = null;
            //var response = instance.CreateAsyncDoc(doc);
            //Assert.IsInstanceOf(typeof(AsyncDoc), response, "response is AsyncDoc");
        }

        /// <summary>
        /// Test CreateDoc
        /// </summary>
        [Test]
        public void CreateDocTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Doc doc = null;
            //var response = instance.CreateDoc(doc);
            //Assert.IsInstanceOf(typeof(byte[]), response, "response is byte[]");
        }

        /// <summary>
        /// Test CreateHostedAsyncDoc
        /// </summary>
        [Test]
        public void CreateHostedAsyncDocTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Doc doc = null;
            //var response = instance.CreateHostedAsyncDoc(doc);
            //Assert.IsInstanceOf(typeof(AsyncDoc), response, "response is AsyncDoc");
        }

        /// <summary>
        /// Test CreateHostedDoc
        /// </summary>
        [Test]
        public void CreateHostedDocTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Doc doc = null;
            //var response = instance.CreateHostedDoc(doc);
            //Assert.IsInstanceOf(typeof(DocStatus), response, "response is DocStatus");
        }

        /// <summary>
        /// Test Expire
        /// </summary>
        [Test]
        public void ExpireTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.Expire(id);

        }

        /// <summary>
        /// Test GetAsyncDoc
        /// </summary>
        [Test]
        public void GetAsyncDocTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetAsyncDoc(id);
            //Assert.IsInstanceOf(typeof(byte[]), response, "response is byte[]");
        }

        /// <summary>
        /// Test GetAsyncDocStatus
        /// </summary>
        [Test]
        public void GetAsyncDocStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetAsyncDocStatus(id);
            //Assert.IsInstanceOf(typeof(DocStatus), response, "response is DocStatus");
        }

    }

}
